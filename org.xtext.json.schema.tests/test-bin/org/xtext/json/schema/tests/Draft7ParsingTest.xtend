/*
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.json.schema.draft7.Model

@ExtendWith(InjectionExtension)
@InjectWith(Draft7InjectorProvider)
class Draft7ParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void type() {
		val result = parseHelper.parse('''
			{
				"type": "object"
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void properties() {
		val result = parseHelper.parse('''
			{
				"properties": {
					"testProp" : {
						"type": "integer"
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void required() {
		val result = parseHelper.parse('''
			{
				"type": "object",
				"required": ["testProp"],
				"properties": {
					"testProp" : {
						"type": "integer"
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			{
				"type": "object",
				"properties": {
					"testProp" : {
						"type": "integer"
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
