/*
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.json.schema.ide.contentassist.antlr.internal.InternalDraft7Parser;
import org.xtext.json.schema.services.Draft7GrammarAccess;

public class Draft7Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Draft7GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Draft7GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getJsonSchemaRootAccess().getAlternatives(), "rule__JsonSchemaRoot__Alternatives");
			builder.put(grammarAccess.getNumberPropertiesAccess().getAlternatives(), "rule__NumberProperties__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives_2(), "rule__Type__Alternatives_2");
			builder.put(grammarAccess.getJsonTypesAccess().getAlternatives(), "rule__JsonTypes__Alternatives");
			builder.put(grammarAccess.getObjectPropertiesAccess().getAlternatives(), "rule__ObjectProperties__Alternatives");
			builder.put(grammarAccess.getStringPropertiesAccess().getAlternatives(), "rule__StringProperties__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2(), "rule__Model__Group_2__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2_0(), "rule__Type__Group_2_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2_0_1(), "rule__Type__Group_2_0_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2_0_1_1(), "rule__Type__Group_2_0_1_1__0");
			builder.put(grammarAccess.getRequiredPropertiesAccess().getGroup(), "rule__RequiredProperties__Group__0");
			builder.put(grammarAccess.getPropertiesAccess().getGroup(), "rule__Properties__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getLengthAccess().getGroup(), "rule__Length__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getMultiplesAccess().getGroup(), "rule__Multiples__Group__0");
			builder.put(grammarAccess.getMinimumAccess().getGroup(), "rule__Minimum__Group__0");
			builder.put(grammarAccess.getExclusiveMinimumAccess().getGroup(), "rule__ExclusiveMinimum__Group__0");
			builder.put(grammarAccess.getMaximumAccess().getGroup(), "rule__Maximum__Group__0");
			builder.put(grammarAccess.getExclusiveMaximumAccess().getGroup(), "rule__ExclusiveMaximum__Group__0");
			builder.put(grammarAccess.getModelAccess().getRootAssignment_2_0(), "rule__Model__RootAssignment_2_0");
			builder.put(grammarAccess.getJsonSchemaRootAccess().getTypeAssignment_0(), "rule__JsonSchemaRoot__TypeAssignment_0");
			builder.put(grammarAccess.getNumberPropertiesAccess().getMinimumAssignment_1(), "rule__NumberProperties__MinimumAssignment_1");
			builder.put(grammarAccess.getNumberPropertiesAccess().getExclusiveMinimumAssignment_2(), "rule__NumberProperties__ExclusiveMinimumAssignment_2");
			builder.put(grammarAccess.getNumberPropertiesAccess().getMaximumAssignment_3(), "rule__NumberProperties__MaximumAssignment_3");
			builder.put(grammarAccess.getNumberPropertiesAccess().getExclusiveMaximumAssignment_4(), "rule__NumberProperties__ExclusiveMaximumAssignment_4");
			builder.put(grammarAccess.getTypeAccess().getTypesAssignment_2_0_1_0(), "rule__Type__TypesAssignment_2_0_1_0");
			builder.put(grammarAccess.getTypeAccess().getTypesAssignment_2_0_1_1_1(), "rule__Type__TypesAssignment_2_0_1_1_1");
			builder.put(grammarAccess.getTypeAccess().getTypeAssignment_2_1(), "rule__Type__TypeAssignment_2_1");
			builder.put(grammarAccess.getObjectPropertiesAccess().getPropertiesAssignment_0(), "rule__ObjectProperties__PropertiesAssignment_0");
			builder.put(grammarAccess.getObjectPropertiesAccess().getRequiredPropertiesAssignment_1(), "rule__ObjectProperties__RequiredPropertiesAssignment_1");
			builder.put(grammarAccess.getRequiredPropertiesAccess().getRequiredPropertiesAssignment_3(), "rule__RequiredProperties__RequiredPropertiesAssignment_3");
			builder.put(grammarAccess.getRequiredPropertiesNameAccess().getNameAssignment(), "rule__RequiredPropertiesName__NameAssignment");
			builder.put(grammarAccess.getPropertiesAccess().getPropertiesAssignment_4(), "rule__Properties__PropertiesAssignment_4");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getPropertiesAssignment_4(), "rule__Property__PropertiesAssignment_4");
			builder.put(grammarAccess.getStringPropertiesAccess().getLengthAssignment_0(), "rule__StringProperties__LengthAssignment_0");
			builder.put(grammarAccess.getStringPropertiesAccess().getPatternAssignment_1(), "rule__StringProperties__PatternAssignment_1");
			builder.put(grammarAccess.getLengthAccess().getLengthAssignment_2(), "rule__Length__LengthAssignment_2");
			builder.put(grammarAccess.getPatternAccess().getPatternAssignment_2(), "rule__Pattern__PatternAssignment_2");
			builder.put(grammarAccess.getMultiplesAccess().getMultipleOfAssignment_2(), "rule__Multiples__MultipleOfAssignment_2");
			builder.put(grammarAccess.getMinimumAccess().getMinimumAssignment_2(), "rule__Minimum__MinimumAssignment_2");
			builder.put(grammarAccess.getExclusiveMinimumAccess().getExclusiveMinimumAssignment_2(), "rule__ExclusiveMinimum__ExclusiveMinimumAssignment_2");
			builder.put(grammarAccess.getMaximumAccess().getMaximumAssignment_2(), "rule__Maximum__MaximumAssignment_2");
			builder.put(grammarAccess.getExclusiveMaximumAccess().getExclusiveMaximumAssignment_2(), "rule__ExclusiveMaximum__ExclusiveMaximumAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Draft7GrammarAccess grammarAccess;

	@Override
	protected InternalDraft7Parser createParser() {
		InternalDraft7Parser result = new InternalDraft7Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Draft7GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Draft7GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
