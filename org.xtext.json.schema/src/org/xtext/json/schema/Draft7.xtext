grammar org.xtext.json.schema.Draft7 with org.eclipse.xtext.common.Terminals
generate draft7 "http://www.xtext.org/json/schema/Draft7"

Model:
	{Model}
	'{'
		(root+=JsonSchemaRoot  (',')?)*
	'}';
	
terminal JSON_ID: '"' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '"';
terminal NUMBER: INT ('.' INT)?; 
terminal REGEX_STRING: '"^' (.)* '$"';
terminal REF_STRING: '"#' (.)* '"';
terminal BOOLEAN: 'true' | 'false';
terminal ARRAY: '[' (.)* ']';

JsonSchemaRoot:
	type=Type |
	enumValue=Enum |
	const=Constant |
	anyOfs=AnyOf |
	oneOfs=OneOf |
	allOfs=AllOf |
	objectProps=ObjectProperties | 
	stringProps=StringProperties |
	numberProps=NumberProperties | 
	arrayProps=ArrayProperties | 
	not=Not |
	ifStatement=IfStatement |
	thenStatement=ThenStatement |
	elseStatement=ElseStatement | 
	schema=Schema |
	reference=Reference |
	title=Title |
	description=Description |
	default=Default |
	examples=Examples |
	comment=Comment |
	id=IdProp
;

/**
 * General
 */
Title:
	'"title"' ':' '"' title=STRING '"'
;
Description:
	'"description"' ':' '"' description=STRING '"'
;
Comment:
	'"$comment"' ':' '"' comment=STRING '"'
;
IdProp:
	'"$id"' ':' '"' id=STRING '"'
;
Default:
	'"default"' ':' '"' defaultValue=STRING '"'
;
Examples:
	'"examples"' ':' '[' '"' exampleValues+=ExamplesValuesType+ '"' ']'
;
ExamplesValuesType:
	STRING | BOOLEAN | NUMBER
;
Schema:
	'"$schema"' ':' '"http://json-schema.org/draft-07/schema#"'
;
Reference:
	'"$ref"' ':' ref=REF_STRING
;
IfStatement:
	'"if"' ':' ifModel=Model
;
ThenStatement:
	'"then"' ':' thenModel=Model
;
ElseStatement:
	'"else"' ':' thenModel=Model
;
Type: 
	'"type"' ':' ('[' (types+=JsonTypes ((',' types+=JsonTypes)*)?) ']' | type=JsonTypes)
;

JsonTypes: 
	type=('"string"'|'"integer"'|'"number"'|'"object"'|'"array"'|'"boolean"'|'"null"')
;

Enum:
	'"enum"' ':'  enumValue=ARRAY
;
Constant:
	'"const"' ':' const=STRING
;
AnyOf: 
	'anyOf' ':' '[' (anyOfs+=Model ((',' anyOfs+=Model)*)?) ']'
;
OneOf:
	'oneOf' ':' '[' (oneOfs+=Model ((',' oneOfs+=Model)*)?) ']'
;
AllOf:
	'allOf' ':' '[' (allOfs+=Model ((',' allOfs+=Model)*)?) ']'
;
Not:
	'not' ':' not=Model
;

/**
 * Array
 */
 ArrayProperties:
 	items=Items |
 	contains=Contains |
	additionalProperties=AdditionalProperties | 
	uniqueItems=UnqueItems
 ;
Items:
 	'"items"' ':' '[' (items+=Model ((',' items+=Model)*)?) ']'
;
Contains:
 	'"contains"' ':' (ContainsArray | ContainsObject)
;
ContainsArray:
	'[' (contains+=Model ((',' contains+=Model)*)?) ']'
;
ContainsObject:
	'{' contain=Model '}'
;
UnqueItems:
	'"uniqueItems"' ':' unique=BOOLEAN
;

/**
 * Object
 */
 
ObjectProperties:
	properties=Properties |
	requiredProperties=RequiredProperties | 
	PropertyNames=PropertyNames |
	MinProperties=MinProperties |
	MaxProperties=MaxProperties | 
	dependencies=Dependencies | 
	additionalProperties=AdditionalProperties
;
PropertyNames:
	'"propertyNames"' ':' '{'
		Pattern
	'}'
;
Dependencies:
	'"dependencies"' ':' '{' dependencies+=(PropertyDependencies|SchemaDependencies)+ '}'
;

SchemaDependencies:
	dependencyProperty=JSON_ID ':' '{' object+=ObjectProperties+ '}'
;
PropertyDependencies:
	dependencyProperty=JSON_ID ':' '[' (dependencyPresents+=JsonTypes ((',' dependencyPresents+=JsonTypes)*)?) ']'
;
MinProperties:
	'"minProperties"' ':' minProperties=INT
;
MaxProperties:
	'"maxProperties"' ':' maxProperties=INT
;
RequiredProperties:
	'"required"' ':' '[' requiredProperties+=RequiredPropertiesName ']'
;
AdditionalProperties:
	'"additionalProperties"' ':' allowed=BOOLEAN
;
RequiredPropertiesName:
	name=JSON_ID
;
Properties:
	'"properties"' ':' '{' properties+=Property+ '}'
;

Property:
	{Property}name=JSON_ID ':' '{' (props+=JsonSchemaRoot  (',')?)*'}'
;

/**
 * Strings
 */
StringProperties:
	length=Length |
	pattern=Pattern | 
	format=Format |
	contentMediaType=ContentMediaType |
	contentEncoding=ContentEncoding
;
Length:
	'"length"' ':' length=INT
;
Pattern:
	'"pattern"' ':' pattern=REGEX_STRING
;
Format:
	'"format"' ':' '"' format=(
		'date-time' | 
		'time' | 
		'date' | 
		'email' | 
		'idn-email' | 
		'hostname' | 
		'ipv4' | 
		'ipv6' | 
		'uri' | 
		'uri-reference' | 
		'iri' | 
		'iri-reference' | 
		'uri-template' | 
		'json-pointer' | 
		'relative-json-pointer' | 
		'regex'
	) '"'
;
ContentMediaType:
	'"contentMediaType"' ':' '"' mediaType=STRING '"'
;
ContentEncoding:
	'"contentEncoding"' ':' '"' encoding=STRING '"'
;
/**
 * Numeric
 */
 
NumberProperties:
	Multiples |
	minimum=Minimum | 
	exclusiveMinimum=ExclusiveMinimum | 
	maximum=Maximum | 
	exclusiveMaximum=ExclusiveMaximum 
;
Multiples:
	'"multiples"' ':' multipleOf=INT
;
Minimum:
	'"minimum"' ':' minimum=NUMBER
;
ExclusiveMinimum:
	'"exclusiveMinimum"' ':' exclusiveMinimum=NUMBER
;
Maximum:
	'"maximum"' ':' maximum=NUMBER
;
ExclusiveMaximum:
	'"exclusiveMaximum"' ':' exclusiveMaximum=NUMBER
;