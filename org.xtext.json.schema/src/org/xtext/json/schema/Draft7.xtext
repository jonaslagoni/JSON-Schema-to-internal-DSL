grammar org.xtext.json.schema.Draft7 with org.eclipse.xtext.common.Terminals
generate draft7 "http://www.xtext.org/json/schema/Draft7"
// inspired by github.com/SOM-Research/asyncapi-toolkit
Schema:
	{Schema}
	'{'
		(
			('"type"' ':' type=Types ','?)?
			&('"dependencies"' ':' '{' dependencies=Dependencies '}' ','?)?
			&('"additionalProperties"' ':' additionalProperties=AdditionalProperties ','?)?
			&('"additionalItems"' ':' additionalItems=AdditionalItems ','?)?
			&('"default"' ':' default=Default ','?)?
			&('"patternProperties"' ':' '{' patternProperties+=NamedSchema (',' patternProperties+=NamedSchema)* '}' ','?)?
			&('"examples"' ':' example=Example ','?)?
			&('"items"' ':' items=Items ','?)?
			&('"contains"' ':' contains=Contains ','?)?
			&('"definitions"' ':' '{' definitions+=NamedSchema (',' definitions+=NamedSchema)* '}' ','?)?
			&('"title"' ':' title=STRING ','?)?
			&('"required"' ':' '[' requiredProperties+=AnyString (',' requiredProperties+=AnyString)* ']' ','?)?
			&('"description"' ':' description=STRING ','?)?
			&('"properties"' ':' '{' properties+=NamedSchema (',' properties+=NamedSchema)* '}' ','?)?
			&('"enum"' ':'  '[' enumValues+=AnyString (',' enumValues+=AnyString)* ']' ','?)?
			&('"$schema"' ':' '"http://json-schema.org/draft-07/schema#"' ','?)?
			&('"$id"' ':' id=AnyString ','?)?
			&('"if"' ':' ifSchema=Schema ','?)?
			&('"then"' ':' thenSchema=Schema ','?)?
			&('"else"' ':' elseSchema=Schema ','?)?
			&('"enum"' ':'  '[' enumValues+=AnyString (',' enumValues+=AnyString)* ']' ','?)?
			&('"const"' ':' (const=AnyString | constBoolean=Boolean) ','?)?
			&('"anyOf"' ':' '[' anyOfs+=AbstractSchema (',' anyOfs+=AbstractSchema)* ']' ','?)?
			&('"oneOf"' ':' '[' oneOfs+=AbstractSchema (',' oneOfs+=AbstractSchema)* ']' ','?)?
			&('"allOf"' ':' '[' allOfs+=AbstractSchema (',' allOfs+=AbstractSchema)* ']' ','?)?
			&('"not"' ':' not=AbstractSchema ','?)?
			&('"uniqueItems"' ':' unique=Boolean ','?)?
			&('"propertyNames"' ':' propertyNames=AbstractSchema ','?)?
			&('"minProperties"' ':' minProperties=INT ','?)?
			&('"maxProperties"' ':' maxProperties=INT ','?)?
			&('"maxItems"' ':' maxItems=INT ','?)?
			&('"minItems"' ':' minItems=INT ','?)?
			&('"maxLength"' ':' maxLength=INT ','?)?
			&('"minLength"' ':' minLength=INT ','?)?
			&('"pattern"' ':' pattern=AnyString ','?)?
			&('"format"' ':' format=FormatTypes ','?)?
			&('"contentMediaType"' ':' mediaType=AnyString ','?)?
			&('"contentEncoding"' ':'  encoding=AnyString ','?)?
			&('"multipleOf"' ':' multipleOf=Number ','?)?
			&('"minimum"' ':' minimum=Number ','?)?
			&('"exclusiveMinimum"' ':' exclusiveMinimum=Number ','?)?
			&('"maximum"' ':' maximum=Number ','?)?
			&('"exclusiveMaximum"' ':' exclusiveMaximum=Number ','?)?
		)
	'}'
;
Dependencies:
	PropertyDependency=PropertyDependency
	| (schemaDependencies+=NamedSchema (',' schemaDependencies+=NamedSchema)*)
;
PropertyDependency:
	name=AnyString ':' '[' dependencies+=AnyString (',' dependencies+=AnyString)* ']'
;
Contains:
	('[' containSchemas+=Schema (',' containSchemas+=Schema)* ']') | containSchemas+=Schema
;
Items:
	('[' items+=AbstractSchema (',' items+=AbstractSchema)* ']') | items+=AbstractSchema | selfReference=Boolean
;
AdditionalProperties:
	allowedBoolean=Boolean | schema=AbstractSchema
;
AdditionalItems:
	allowedBoolean=Boolean | schema=AbstractSchema
;
Default:
	 defaultSchema=AbstractSchema | defaultString=AnyString | defaultBoolean=Boolean | defaultNumber=Number | {Default} ('[' (defaultArrayItems+=AbstractSchema (',' defaultArrayItems+=AbstractSchema)*)? ']')
;
Example:
	exampleSchema=Schema | exampleString=AnyString | exampleBoolean=Boolean | exampleNumber=Number | ('[' exampleArrayItems+=Schema (',' exampleArrayItems+=Schema)* ']')
;
Types:
	('[' jsonTypes+=JsonTypes (',' jsonTypes+=JsonTypes)* ']') | jsonTypes+=JsonTypes
;
AbstractSchema:
	Reference | Schema
;

Reference:
	{Reference} '{' '"$ref"' ':' uri=AnyString '}'
;

NamedSchema:
	{NamedSchema} name=AnyString ':' schema=AbstractSchema
;




enum Boolean:
	UNSET
	| trueValue='true' 
	| falseValue='false'
;

enum JsonTypes: 
	UNSET
	| string='"string"'
	| integer='"integer"'
	| number='"number"'
	| object='"object"'
	| array='"array"'
	| boolean='"boolean"'
	| null='"null"'
;

enum FormatTypes:
	UNSET |
	date_time='"date-time"' | 
	time='"time"' | 
	date='"date"' | 
	email='"email"' | 
	idn_email='"idn-email"' | 
	hostname='"hostname"' | 
	ipv4='"ipv4"' | 
	ipv6='"ipv6"' | 
	uri='"uri"' | 
	uri_reference='"uri-reference"' | 
	iri='"iri"' | 
	iri_reference='"iri-reference"' | 
	uri_template='"uri-template"' | 
	json_pointer='"json-pointer"' | 
	relative_json_pointer='"relative-json-pointer"' | 
	regex='"regex"'
;
AnyString:
	name=STRING
	| keyword=JsonSchemaKeyword
;
terminal ENUMBER:
   ('E' | 'e') '-'? INT;
Number:
	(negative='-')? number=INT ('.' decimal=INT)? (exponent=ENUMBER)?
;

enum JsonSchemaKeyword:
	title='"title"'
	| schemaDraft7='"http://json-schema.org/draft-07/schema#"'
	| additionalProperties='"additionalProperties"'
	| additionalItems='"additionalItems"'
	| description='"description"'
	| comment='"$comment"'
	| id='"$id"'
	| definitions='"definitions"'
	| default='"default"'
	| examples='"examples"'
	| schema='"$schema"'
	| ref='"$ref"'
	| enumKeyword='"enum"'
	| const='"const"'
	| type='"type"'	
	| string='"string"'
	| integer='"integer"'
	| number='"number"'
	| object='"object"'
	| array='"array"'
	| boolean='"boolean"'
	| null='"null"'
	| date_time='"date-time"'
	| time='"time"'
	| date='"date"'
	| email='"email"'
	| idn_email='"idn-email"'
	| hostname='"hostname"'
	| ipv4='"ipv4"'
	| ipv6='"ipv6"'
	| uri='"uri"'
	| uri_reference='"uri-reference"'
	| iri='"iri"'
	| iri_reference='"iri-reference"'
	| uri_template='"uri-template"'
	| json_pointer='"json-pointer"'
	| relative_json_pointer='"relative-json-pointer"'
	| regex='"regex"'
	| contains='"contains"'
	| uniqueItems='"uniqueItems"'
	| propertyNames='"propertyNames"'
	| length='"length"'
	| minLength='"minLength"'
	| maxLength='"maxLength"'
	| minItems='"minItems"'
	| maxItems='"maxItems"'
	| pattern='"pattern"'
	| format='"format"'
	| minProperties='"minProperties"'
	| maxProperties='"maxProperties"'
	| dependencies='"dependencies"'
	| patternProperties='"patternProperties"'
	| required='"required"'
	| properties='"properties"'
	| if='"if"'
	| then='"then"'
	| else='"else"'
	| anyOf='"anyOf"'
	| oneOf='"oneOf"'
	| allOf='"allOf"'
	| not='"not"'	
	| items='"items"'
	| contentMediaType='"contentMediaType"'
	| contentEncoding='"contentEncoding"'
	| multiples='"multiples"'
	| minimum='"minimum"'
	| exclusiveMinimum='"exclusiveMinimum"'
	| maximum='"maximum"'
	| exclusiveMaximum='"exclusiveMaximum"';


