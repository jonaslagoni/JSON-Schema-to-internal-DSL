/*
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.List
import java.util.ArrayList
import org.eclipse.xtend.lib.annotations.Accessors
import org.xtext.json.schema.draft7.Schema
import org.xtext.json.schema.draft7.AbstractSchema
import org.xtext.json.schema.draft7.AnyString
import org.xtext.json.schema.draft7.JsonTypes
import org.xtext.json.schema.draft7.NamedSchema
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import org.xtext.json.schema.draft7.Types
import java.util.Map
import java.util.HashMap
import org.xtext.json.schema.draft7.Reference

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Draft7Generator extends AbstractGenerator {
	Schema root
	List<CustomModel> objectList
	ModelGenerator modelGenerator
	BuilderGenerator builderGenerator
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		objectList = new ArrayList()
		walkedThroughSchemas = new ArrayList<String>()
		root = resource.allContents.filter(Schema).next
		root.recursiveObjectFinder(null)
		modelGenerator = new ModelGenerator(objectList, root)
		builderGenerator = new BuilderGenerator(objectList, root)
		objectList.forEach[model | {
			modelGenerator.generateModelFile(model, fsa)
			builderGenerator.generateBuilderFile(model, fsa)
		}]
		System.out.println(objectList.size)
	}
	var anonymCounter = 1
	var walkedThroughSchemas = new ArrayList<String>()
	def void recursiveObjectFinder(AbstractSchema abstractSchema, String parentName){
		if(abstractSchema === null)
			return
		var schema = GeneratorUtils.isSchema(abstractSchema) ? (abstractSchema as Schema) : GeneratorUtils.findLocalReference(GeneratorUtils.realizeName((abstractSchema as Reference).uri),root)
		if(GeneratorUtils.isObject(schema)){
			var objectName = ""
			if(GeneratorUtils.isReference(abstractSchema)){
				objectName = GeneratorUtils.getReferenceName(abstractSchema)
				if(schema.title === null){
					schema.title = objectName
				}
			}else{
				if(schema.title !== null){
					objectName = schema.title.replace(" ", "").toFirstUpper
				}else{
					objectName = "AnonymSchema" + anonymCounter++
				}
			}
			if(walkedThroughSchemas.contains(objectName)){
				return
			}
			val cm = new CustomModel(schema, objectName)
			cm.parentName = parentName;
			objectList.add(cm)
			walkedThroughSchemas.add(objectName)
			
			if(schema.additionalProperties !== null && schema.additionalProperties.schema !== null){
				schema.additionalProperties.schema.recursiveObjectFinder(objectName)
			}
			if(schema.properties !== null){
				for(property: schema.properties){
					property.schema.recursiveObjectFinder(objectName)
				}
			}
		}else if(GeneratorUtils.isArray(schema)){
			if(schema.additionalItems !== null && schema.additionalItems.schema !== null){
				schema.additionalItems.schema.recursiveObjectFinder(parentName)
			}
			
			if(schema.items !== null && schema.items.items.size > 0){
				for(itemSchema: schema.items.items){
					itemSchema.recursiveObjectFinder(parentName)
				}
			}
		}
		
		if(schema.allOfs !== null){
			for(allOf: schema.allOfs){
				allOf.recursiveObjectFinder(parentName)
			}
		}
		if(schema.anyOfs !== null){
			for(anyOf: schema.anyOfs){
				anyOf.recursiveObjectFinder(parentName)
			}
		}
		if(schema.oneOfs !== null){
			for(oneOf: schema.oneOfs){
				oneOf.recursiveObjectFinder(parentName)
			}
		}
	}
	
	
}
