/**
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.json.schema.draft7.AbstractSchema;
import org.xtext.json.schema.draft7.NamedSchema;
import org.xtext.json.schema.draft7.Reference;
import org.xtext.json.schema.draft7.Schema;
import org.xtext.json.schema.generator.BuilderGenerator;
import org.xtext.json.schema.generator.CustomModel;
import org.xtext.json.schema.generator.GeneratorUtils;
import org.xtext.json.schema.generator.ModelGenerator;
import org.xtext.json.schema.generator.RootBuilderGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Draft7Generator extends AbstractGenerator {
  private Schema root;
  
  private List<CustomModel> objectList;
  
  private ModelGenerator modelGenerator;
  
  private RootBuilderGenerator rootBuilderGenerator;
  
  private BuilderGenerator builderGenerator;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ArrayList<CustomModel> _arrayList = new ArrayList<CustomModel>();
    this.objectList = _arrayList;
    this.root = Iterators.<Schema>filter(resource.getAllContents(), Schema.class).next();
    String _xifexpression = null;
    String _title = this.root.getTitle();
    boolean _tripleNotEquals = (_title != null);
    if (_tripleNotEquals) {
      _xifexpression = StringExtensions.toFirstUpper(this.root.getTitle().replace(" ", "").replace(".", ""));
    } else {
      _xifexpression = "root";
    }
    String rootname = _xifexpression;
    CustomModel _customModel = new CustomModel(this.root, rootname);
    this.objectList.add(_customModel);
    this.recursiveObjectsFinder(this.root.getProperties(), rootname);
    this.recursiveObjectsFinder(this.root.getDefinitions(), rootname);
    ModelGenerator _modelGenerator = new ModelGenerator(this.objectList, this.root);
    this.modelGenerator = _modelGenerator;
    RootBuilderGenerator _rootBuilderGenerator = new RootBuilderGenerator(this.objectList, this.root);
    this.rootBuilderGenerator = _rootBuilderGenerator;
    BuilderGenerator _builderGenerator = new BuilderGenerator(this.objectList, this.root);
    this.builderGenerator = _builderGenerator;
    final Consumer<CustomModel> _function = (CustomModel model) -> {
      this.modelGenerator.generateModelFile(model, fsa);
      this.builderGenerator.generateBuilderFile(model, fsa);
      this.rootBuilderGenerator.generateBuilderFile(model, fsa);
    };
    this.objectList.forEach(_function);
    System.out.println(this.objectList.size());
  }
  
  public void recursiveObjectsFinder(final List<NamedSchema> properties, final String parentName) {
    final Consumer<NamedSchema> _function = (NamedSchema property) -> {
      Schema _xifexpression = null;
      boolean _isSchema = GeneratorUtils.isSchema(property.getSchema());
      if (_isSchema) {
        AbstractSchema _schema = property.getSchema();
        _xifexpression = ((Schema) _schema);
      } else {
        AbstractSchema _schema_1 = property.getSchema();
        _xifexpression = GeneratorUtils.findLocalReference(GeneratorUtils.realizeName(((Reference) _schema_1).getUri()), this.root);
      }
      Schema schema = _xifexpression;
      if (((schema != null) && (!GeneratorUtils.realizeName(property.getName()).toLowerCase().equals(parentName.toLowerCase())))) {
        boolean _isObject = GeneratorUtils.isObject(schema);
        if (_isObject) {
          this.depthCounter = 0;
          String _realizeName = GeneratorUtils.realizeName(property.getName());
          final CustomModel cm = new CustomModel(schema, _realizeName);
          cm.setParentName(parentName);
          this.objectList.add(cm);
          this.recursiveObjectsFinder(schema.getProperties(), GeneratorUtils.realizeName(property.getName()));
        }
        if (((schema.getAnyOfs() != null) && (!schema.getAnyOfs().isEmpty()))) {
          this.complexityObjectsFinder(schema.getAnyOfs(), GeneratorUtils.realizeName(property.getName()));
        }
        if (((schema.getOneOfs() != null) && (!schema.getOneOfs().isEmpty()))) {
          this.complexityObjectsFinder(schema.getOneOfs(), GeneratorUtils.realizeName(property.getName()));
        }
        if (((schema.getAllOfs() != null) && (!schema.getAllOfs().isEmpty()))) {
          this.complexityObjectsFinder(schema.getAllOfs(), GeneratorUtils.realizeName(property.getName()));
        }
      }
    };
    properties.forEach(_function);
  }
  
  private int anonymCounter = 1;
  
  private int depthCounter = 0;
  
  public void complexityObjectsFinder(final List<AbstractSchema> schemas, final String parentName) {
    final Consumer<AbstractSchema> _function = (AbstractSchema abstractSchema) -> {
      Schema _xifexpression = null;
      boolean _isSchema = GeneratorUtils.isSchema(abstractSchema);
      if (_isSchema) {
        _xifexpression = ((Schema) abstractSchema);
      } else {
        _xifexpression = GeneratorUtils.findLocalReference(GeneratorUtils.realizeName(((Reference) abstractSchema).getUri()), this.root);
      }
      Schema schema = _xifexpression;
      if (((schema != null) && (this.depthCounter < 1))) {
        int _plusPlus = this.anonymCounter++;
        final String name = ("anonym-" + Integer.valueOf(_plusPlus));
        boolean _isObject = GeneratorUtils.isObject(schema);
        if (_isObject) {
          this.depthCounter = 0;
          final CustomModel cm = new CustomModel(schema, name);
          cm.setParentName(parentName);
          this.objectList.add(cm);
          this.recursiveObjectsFinder(schema.getProperties(), name);
        }
        if (((schema.getAnyOfs() != null) && (!schema.getAnyOfs().isEmpty()))) {
          this.depthCounter++;
          this.complexityObjectsFinder(schema.getAnyOfs(), name);
        }
        if (((schema.getOneOfs() != null) && (!schema.getOneOfs().isEmpty()))) {
          this.depthCounter++;
          this.complexityObjectsFinder(schema.getOneOfs(), name);
        }
        if (((schema.getAllOfs() != null) && (!schema.getAllOfs().isEmpty()))) {
          this.depthCounter++;
          this.complexityObjectsFinder(schema.getAllOfs(), name);
        }
      }
    };
    schemas.forEach(_function);
  }
}
