/**
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.generator;

import java.util.List;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.json.schema.draft7.AnyString;
import org.xtext.json.schema.draft7.NamedSchema;
import org.xtext.json.schema.draft7.Schema;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Draft7Generator extends AbstractGenerator {
  private Schema root;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field objectProperties is undefined"
      + "\nThe method generateBuilderFile(IFileSystemAccess2) is undefined"
      + "\nThe method or field objectProperties is undefined"
      + "\nInvalid number of arguments. The method recursiveObjectsFinder(List<NamedSchema>) is not applicable for the arguments (EList<NamedSchema>,String)"
      + "\nforEach cannot be resolved"
      + "\nadd cannot be resolved");
  }
  
  public abstract void recursiveObjectsFinder(final List<NamedSchema> properties);
  
  public String getName(final AnyString anyString) {
    String _xifexpression = null;
    if (((anyString.getName() != null) && (!anyString.getName().isEmpty()))) {
      _xifexpression = anyString.getName();
    } else {
      _xifexpression = anyString.getKeyword().name();
    }
    return _xifexpression;
  }
}
