/*
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Draft7GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRootAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRootRootParserRuleCall_1_0_0 = (RuleCall)cRootAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Model:
		//	'{' (root+=Root ','?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (root+=Root ','?)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(root+=Root ','?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//root+=Root
		public Assignment getRootAssignment_1_0() { return cRootAssignment_1_0; }
		
		//Root
		public RuleCall getRootRootParserRuleCall_1_0_0() { return cRootRootParserRuleCall_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Root");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRootAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRootAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLengthParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRootAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cMultiplesParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRootAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cMinimumParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRootAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cExclusiveMinimumParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRootAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cMaximumParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cRootAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cExclusiveMaximumParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cJSONPropertiesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Root:
		//	{Root} Type | {Root} Length | {Root} Multiples | {Root} Minimum | {Root} ExclusiveMinimum | {Root} Maximum | {Root}
		//	ExclusiveMaximum | JSONProperties;
		@Override public ParserRule getRule() { return rule; }
		
		//{Root} Type | {Root} Length | {Root} Multiples | {Root} Minimum | {Root} ExclusiveMinimum | {Root} Maximum | {Root}
		//ExclusiveMaximum | JSONProperties
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Root} Type
		public Group getGroup_0() { return cGroup_0; }
		
		//{Root}
		public Action getRootAction_0_0() { return cRootAction_0_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0_1() { return cTypeParserRuleCall_0_1; }
		
		//{Root} Length
		public Group getGroup_1() { return cGroup_1; }
		
		//{Root}
		public Action getRootAction_1_0() { return cRootAction_1_0; }
		
		//Length
		public RuleCall getLengthParserRuleCall_1_1() { return cLengthParserRuleCall_1_1; }
		
		//{Root} Multiples
		public Group getGroup_2() { return cGroup_2; }
		
		//{Root}
		public Action getRootAction_2_0() { return cRootAction_2_0; }
		
		//Multiples
		public RuleCall getMultiplesParserRuleCall_2_1() { return cMultiplesParserRuleCall_2_1; }
		
		//{Root} Minimum
		public Group getGroup_3() { return cGroup_3; }
		
		//{Root}
		public Action getRootAction_3_0() { return cRootAction_3_0; }
		
		//Minimum
		public RuleCall getMinimumParserRuleCall_3_1() { return cMinimumParserRuleCall_3_1; }
		
		//{Root} ExclusiveMinimum
		public Group getGroup_4() { return cGroup_4; }
		
		//{Root}
		public Action getRootAction_4_0() { return cRootAction_4_0; }
		
		//ExclusiveMinimum
		public RuleCall getExclusiveMinimumParserRuleCall_4_1() { return cExclusiveMinimumParserRuleCall_4_1; }
		
		//{Root} Maximum
		public Group getGroup_5() { return cGroup_5; }
		
		//{Root}
		public Action getRootAction_5_0() { return cRootAction_5_0; }
		
		//Maximum
		public RuleCall getMaximumParserRuleCall_5_1() { return cMaximumParserRuleCall_5_1; }
		
		//{Root} ExclusiveMaximum
		public Group getGroup_6() { return cGroup_6; }
		
		//{Root}
		public Action getRootAction_6_0() { return cRootAction_6_0; }
		
		//ExclusiveMaximum
		public RuleCall getExclusiveMaximumParserRuleCall_6_1() { return cExclusiveMaximumParserRuleCall_6_1; }
		
		//JSONProperties
		public RuleCall getJSONPropertiesParserRuleCall_7() { return cJSONPropertiesParserRuleCall_7; }
	}
	public class RequiredPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.RequiredProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cZuperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cZuperJSONPropertyCrossReference_3_0 = (CrossReference)cZuperAssignment_3.eContents().get(0);
		private final RuleCall cZuperJSONPropertyIDTerminalRuleCall_3_0_1 = (RuleCall)cZuperJSONPropertyCrossReference_3_0.eContents().get(1);
		
		//RequiredProperties:
		//	'required' ':' '[' zuper=[JSONProperty];
		@Override public ParserRule getRule() { return rule; }
		
		//'required' ':' '[' zuper=[JSONProperty]
		public Group getGroup() { return cGroup; }
		
		//'required'
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//zuper=[JSONProperty]
		public Assignment getZuperAssignment_3() { return cZuperAssignment_3; }
		
		//[JSONProperty]
		public CrossReference getZuperJSONPropertyCrossReference_3_0() { return cZuperJSONPropertyCrossReference_3_0; }
		
		//ID
		public RuleCall getZuperJSONPropertyIDTerminalRuleCall_3_0_1() { return cZuperJSONPropertyIDTerminalRuleCall_3_0_1; }
	}
	public class JSONPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.JSONProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJSONPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesJSONPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//JSONProperties:
		//	{JSONProperties} '"properties"' ':' '{' properties+=JSONProperty* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{JSONProperties} '"properties"' ':' '{' properties+=JSONProperty* '}'
		public Group getGroup() { return cGroup; }
		
		//{JSONProperties}
		public Action getJSONPropertiesAction_0() { return cJSONPropertiesAction_0; }
		
		//'"properties"'
		public Keyword getPropertiesKeyword_1() { return cPropertiesKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//properties+=JSONProperty*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//JSONProperty
		public RuleCall getPropertiesJSONPropertyParserRuleCall_4_0() { return cPropertiesJSONPropertyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class JSONPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.JSONProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyRootParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JSONProperty:
		//	name=ID ':' '{' property=Root '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' '{' property=Root '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//property=Root
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//Root
		public RuleCall getPropertyRootParserRuleCall_3_0() { return cPropertyRootParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cJsonTypesParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final RuleCall cJsonTypesParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Type:
		//	'"type"' ':' ('[' JsonTypes+ ']' | JsonTypes);
		@Override public ParserRule getRule() { return rule; }
		
		//'"type"' ':' ('[' JsonTypes+ ']' | JsonTypes)
		public Group getGroup() { return cGroup; }
		
		//'"type"'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//('[' JsonTypes+ ']' | JsonTypes)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'[' JsonTypes+ ']'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }
		
		//JsonTypes+
		public RuleCall getJsonTypesParserRuleCall_2_0_1() { return cJsonTypesParserRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_0_2() { return cRightSquareBracketKeyword_2_0_2; }
		
		//JsonTypes
		public RuleCall getJsonTypesParserRuleCall_2_1() { return cJsonTypesParserRuleCall_2_1; }
	}
	public class JsonTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.JsonTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cObjectKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cArrayKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNullKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//JsonTypes:
		//	'"string"' | '"integer"' | '"number"' | '"object"' | '"array"' | '"boolean"' | '"null"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"string"' | '"integer"' | '"number"' | '"object"' | '"array"' | '"boolean"' | '"null"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'"string"'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'"integer"'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'"number"'
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }
		
		//'"object"'
		public Keyword getObjectKeyword_3() { return cObjectKeyword_3; }
		
		//'"array"'
		public Keyword getArrayKeyword_4() { return cArrayKeyword_4; }
		
		//'"boolean"'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
		
		//'"null"'
		public Keyword getNullKeyword_6() { return cNullKeyword_6; }
	}
	public class MultiplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Multiples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiplesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Multiples:
		//	'"multiples":' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'"multiples":' INT
		public Group getGroup() { return cGroup; }
		
		//'"multiples":'
		public Keyword getMultiplesKeyword_0() { return cMultiplesKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class MinimumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Minimum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinimumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Minimum:
		//	'"minimum":' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'"minimum":' INT
		public Group getGroup() { return cGroup; }
		
		//'"minimum":'
		public Keyword getMinimumKeyword_0() { return cMinimumKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ExclusiveMinimumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.ExclusiveMinimum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveMinimumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExclusiveMinimum:
		//	'"exclusiveMinimum":' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'"exclusiveMinimum":' INT
		public Group getGroup() { return cGroup; }
		
		//'"exclusiveMinimum":'
		public Keyword getExclusiveMinimumKeyword_0() { return cExclusiveMinimumKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class MaximumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Maximum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaximumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Maximum:
		//	'"maximum":' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'"maximum":' INT
		public Group getGroup() { return cGroup; }
		
		//'"maximum":'
		public Keyword getMaximumKeyword_0() { return cMaximumKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ExclusiveMaximumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.ExclusiveMaximum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveMaximumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExclusiveMaximum:
		//	'"exclusiveMaximum":' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'"exclusiveMaximum":' INT
		public Group getGroup() { return cGroup; }
		
		//'"exclusiveMaximum":'
		public Keyword getExclusiveMaximumKeyword_0() { return cExclusiveMaximumKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.Length");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Length:
		//	'"length":' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'"length":' INT
		public Group getGroup() { return cGroup; }
		
		//'"length":'
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tID;
	private final RootElements pRoot;
	private final RequiredPropertiesElements pRequiredProperties;
	private final JSONPropertiesElements pJSONProperties;
	private final JSONPropertyElements pJSONProperty;
	private final TypeElements pType;
	private final JsonTypesElements pJsonTypes;
	private final MultiplesElements pMultiples;
	private final MinimumElements pMinimum;
	private final ExclusiveMinimumElements pExclusiveMinimum;
	private final MaximumElements pMaximum;
	private final ExclusiveMaximumElements pExclusiveMaximum;
	private final LengthElements pLength;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Draft7GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.json.schema.Draft7.ID");
		this.pRoot = new RootElements();
		this.pRequiredProperties = new RequiredPropertiesElements();
		this.pJSONProperties = new JSONPropertiesElements();
		this.pJSONProperty = new JSONPropertyElements();
		this.pType = new TypeElements();
		this.pJsonTypes = new JsonTypesElements();
		this.pMultiples = new MultiplesElements();
		this.pMinimum = new MinimumElements();
		this.pExclusiveMinimum = new ExclusiveMinimumElements();
		this.pMaximum = new MaximumElements();
		this.pExclusiveMaximum = new ExclusiveMaximumElements();
		this.pLength = new LengthElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.json.schema.Draft7".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'{' (root+=Root ','?)*
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal ID:
	//	'"' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '"';
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//Root:
	//	{Root} Type | {Root} Length | {Root} Multiples | {Root} Minimum | {Root} ExclusiveMinimum | {Root} Maximum | {Root}
	//	ExclusiveMaximum | JSONProperties;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//RequiredProperties:
	//	'required' ':' '[' zuper=[JSONProperty];
	public RequiredPropertiesElements getRequiredPropertiesAccess() {
		return pRequiredProperties;
	}
	
	public ParserRule getRequiredPropertiesRule() {
		return getRequiredPropertiesAccess().getRule();
	}
	
	//JSONProperties:
	//	{JSONProperties} '"properties"' ':' '{' properties+=JSONProperty* '}';
	public JSONPropertiesElements getJSONPropertiesAccess() {
		return pJSONProperties;
	}
	
	public ParserRule getJSONPropertiesRule() {
		return getJSONPropertiesAccess().getRule();
	}
	
	//JSONProperty:
	//	name=ID ':' '{' property=Root '}';
	public JSONPropertyElements getJSONPropertyAccess() {
		return pJSONProperty;
	}
	
	public ParserRule getJSONPropertyRule() {
		return getJSONPropertyAccess().getRule();
	}
	
	//Type:
	//	'"type"' ':' ('[' JsonTypes+ ']' | JsonTypes);
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//JsonTypes:
	//	'"string"' | '"integer"' | '"number"' | '"object"' | '"array"' | '"boolean"' | '"null"';
	public JsonTypesElements getJsonTypesAccess() {
		return pJsonTypes;
	}
	
	public ParserRule getJsonTypesRule() {
		return getJsonTypesAccess().getRule();
	}
	
	//Multiples:
	//	'"multiples":' INT;
	public MultiplesElements getMultiplesAccess() {
		return pMultiples;
	}
	
	public ParserRule getMultiplesRule() {
		return getMultiplesAccess().getRule();
	}
	
	//Minimum:
	//	'"minimum":' INT;
	public MinimumElements getMinimumAccess() {
		return pMinimum;
	}
	
	public ParserRule getMinimumRule() {
		return getMinimumAccess().getRule();
	}
	
	//ExclusiveMinimum:
	//	'"exclusiveMinimum":' INT;
	public ExclusiveMinimumElements getExclusiveMinimumAccess() {
		return pExclusiveMinimum;
	}
	
	public ParserRule getExclusiveMinimumRule() {
		return getExclusiveMinimumAccess().getRule();
	}
	
	//Maximum:
	//	'"maximum":' INT;
	public MaximumElements getMaximumAccess() {
		return pMaximum;
	}
	
	public ParserRule getMaximumRule() {
		return getMaximumAccess().getRule();
	}
	
	//ExclusiveMaximum:
	//	'"exclusiveMaximum":' INT;
	public ExclusiveMaximumElements getExclusiveMaximumAccess() {
		return pExclusiveMaximum;
	}
	
	public ParserRule getExclusiveMaximumRule() {
		return getExclusiveMaximumAccess().getRule();
	}
	
	//Length:
	//	'"length":' INT;
	public LengthElements getLengthAccess() {
		return pLength;
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
