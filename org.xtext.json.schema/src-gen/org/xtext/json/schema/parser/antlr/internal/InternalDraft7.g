/*
 * generated by Xtext 2.20.0
 */
grammar InternalDraft7;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.json.schema.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.json.schema.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.json.schema.services.Draft7GrammarAccess;

}

@parser::members {

 	private Draft7GrammarAccess grammarAccess;

    public InternalDraft7Parser(TokenStream input, Draft7GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected Draft7GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getRootJsonSchemaRootParserRuleCall_2_0_0());
					}
					lv_root_2_0=ruleJsonSchemaRoot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"root",
							lv_root_2_0,
							"org.xtext.json.schema.Draft7.JsonSchemaRoot");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getModelAccess().getCommaKeyword_2_1());
				}
			)?
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleJsonSchemaRoot
entryRuleJsonSchemaRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonSchemaRootRule()); }
	iv_ruleJsonSchemaRoot=ruleJsonSchemaRoot
	{ $current=$iv_ruleJsonSchemaRoot.current; }
	EOF;

// Rule JsonSchemaRoot
ruleJsonSchemaRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonSchemaRootAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonSchemaRootRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.json.schema.Draft7.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getJsonSchemaRootAccess().getObjectPropertiesParserRuleCall_1());
		}
		this_ObjectProperties_1=ruleObjectProperties
		{
			$current = $this_ObjectProperties_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJsonSchemaRootAccess().getStringPropertiesParserRuleCall_2());
		}
		this_StringProperties_2=ruleStringProperties
		{
			$current = $this_StringProperties_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJsonSchemaRootAccess().getNumberPropertiesParserRuleCall_3());
		}
		this_NumberProperties_3=ruleNumberProperties
		{
			$current = $this_NumberProperties_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberProperties
entryRuleNumberProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberPropertiesRule()); }
	iv_ruleNumberProperties=ruleNumberProperties
	{ $current=$iv_ruleNumberProperties.current; }
	EOF;

// Rule NumberProperties
ruleNumberProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumberPropertiesAccess().getMultiplesParserRuleCall_0());
		}
		this_Multiples_0=ruleMultiples
		{
			$current = $this_Multiples_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberPropertiesAccess().getMinimumMinimumParserRuleCall_1_0());
				}
				lv_minimum_1_0=ruleMinimum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberPropertiesRule());
					}
					set(
						$current,
						"minimum",
						lv_minimum_1_0,
						"org.xtext.json.schema.Draft7.Minimum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberPropertiesAccess().getExclusiveMinimumExclusiveMinimumParserRuleCall_2_0());
				}
				lv_exclusiveMinimum_2_0=ruleExclusiveMinimum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberPropertiesRule());
					}
					set(
						$current,
						"exclusiveMinimum",
						lv_exclusiveMinimum_2_0,
						"org.xtext.json.schema.Draft7.ExclusiveMinimum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberPropertiesAccess().getMaximumMaximumParserRuleCall_3_0());
				}
				lv_maximum_3_0=ruleMaximum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberPropertiesRule());
					}
					set(
						$current,
						"maximum",
						lv_maximum_3_0,
						"org.xtext.json.schema.Draft7.Maximum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberPropertiesAccess().getExclusiveMaximumExclusiveMaximumParserRuleCall_4_0());
				}
				lv_exclusiveMaximum_4_0=ruleExclusiveMaximum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberPropertiesRule());
					}
					set(
						$current,
						"exclusiveMaximum",
						lv_exclusiveMaximum_4_0,
						"org.xtext.json.schema.Draft7.ExclusiveMaximum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"type"'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getColonKeyword_1());
		}
		(
			(
				otherlv_2='['
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_2_0_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getTypeAccess().getTypesJsonTypesParserRuleCall_2_0_1_0_0());
							}
							lv_types_3_0=ruleJsonTypes
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTypeRule());
								}
								add(
									$current,
									"types",
									lv_types_3_0,
									"org.xtext.json.schema.Draft7.JsonTypes");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getCommaKeyword_2_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getTypeAccess().getTypesJsonTypesParserRuleCall_2_0_1_1_1_0());
								}
								lv_types_5_0=ruleJsonTypes
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTypeRule());
									}
									add(
										$current,
										"types",
										lv_types_5_0,
										"org.xtext.json.schema.Draft7.JsonTypes");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_2_0_2());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getTypeJsonTypesParserRuleCall_2_1_0());
					}
					lv_type_7_0=ruleJsonTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_7_0,
							"org.xtext.json.schema.Draft7.JsonTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleJsonTypes
entryRuleJsonTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getJsonTypesRule()); }
	iv_ruleJsonTypes=ruleJsonTypes
	{ $current=$iv_ruleJsonTypes.current.getText(); }
	EOF;

// Rule JsonTypes
ruleJsonTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"string"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getStringKeyword_0());
		}
		    |
		kw='"integer"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getIntegerKeyword_1());
		}
		    |
		kw='"number"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getNumberKeyword_2());
		}
		    |
		kw='"object"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getObjectKeyword_3());
		}
		    |
		kw='"array"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getArrayKeyword_4());
		}
		    |
		kw='"boolean"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getBooleanKeyword_5());
		}
		    |
		kw='"null"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getNullKeyword_6());
		}
	)
;

// Entry rule entryRuleObjectProperties
entryRuleObjectProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectPropertiesRule()); }
	iv_ruleObjectProperties=ruleObjectProperties
	{ $current=$iv_ruleObjectProperties.current; }
	EOF;

// Rule ObjectProperties
ruleObjectProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPropertiesAccess().getPropertiesPropertiesParserRuleCall_0_0());
				}
				lv_properties_0_0=ruleProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPropertiesRule());
					}
					set(
						$current,
						"properties",
						lv_properties_0_0,
						"org.xtext.json.schema.Draft7.Properties");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPropertiesAccess().getRequiredPropertiesRequiredPropertiesParserRuleCall_1_0());
				}
				lv_requiredProperties_1_0=ruleRequiredProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPropertiesRule());
					}
					set(
						$current,
						"requiredProperties",
						lv_requiredProperties_1_0,
						"org.xtext.json.schema.Draft7.RequiredProperties");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRequiredProperties
entryRuleRequiredProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequiredPropertiesRule()); }
	iv_ruleRequiredProperties=ruleRequiredProperties
	{ $current=$iv_ruleRequiredProperties.current; }
	EOF;

// Rule RequiredProperties
ruleRequiredProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"required"'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequiredPropertiesAccess().getRequiredKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRequiredPropertiesAccess().getColonKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getRequiredPropertiesAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequiredPropertiesAccess().getRequiredPropertiesRequiredPropertiesNameParserRuleCall_3_0());
				}
				lv_requiredProperties_3_0=ruleRequiredPropertiesName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequiredPropertiesRule());
					}
					add(
						$current,
						"requiredProperties",
						lv_requiredProperties_3_0,
						"org.xtext.json.schema.Draft7.RequiredPropertiesName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getRequiredPropertiesAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRequiredPropertiesName
entryRuleRequiredPropertiesName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequiredPropertiesNameRule()); }
	iv_ruleRequiredPropertiesName=ruleRequiredPropertiesName
	{ $current=$iv_ruleRequiredPropertiesName.current; }
	EOF;

// Rule RequiredPropertiesName
ruleRequiredPropertiesName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_JSON_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getRequiredPropertiesNameAccess().getNameJSON_IDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRequiredPropertiesNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.xtext.json.schema.Draft7.JSON_ID");
			}
		)
	)
;

// Entry rule entryRuleProperties
entryRuleProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertiesRule()); }
	iv_ruleProperties=ruleProperties
	{ $current=$iv_ruleProperties.current; }
	EOF;

// Rule Properties
ruleProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPropertiesAccess().getPropertiesAction_0(),
					$current);
			}
		)
		otherlv_1='"properties"'
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertiesAccess().getPropertiesKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertiesAccess().getColonKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPropertiesAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertiesAccess().getPropertiesPropertyParserRuleCall_4_0());
				}
				lv_properties_4_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertiesRule());
					}
					add(
						$current,
						"properties",
						lv_properties_4_0,
						"org.xtext.json.schema.Draft7.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPropertiesAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPropertyAccess().getPropertyAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_JSON_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameJSON_IDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.json.schema.Draft7.JSON_ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getColonKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getPropertiesJsonSchemaRootParserRuleCall_4_0());
				}
				lv_properties_4_0=ruleJsonSchemaRoot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					add(
						$current,
						"properties",
						lv_properties_4_0,
						"org.xtext.json.schema.Draft7.JsonSchemaRoot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPropertyAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStringProperties
entryRuleStringProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringPropertiesRule()); }
	iv_ruleStringProperties=ruleStringProperties
	{ $current=$iv_ruleStringProperties.current; }
	EOF;

// Rule StringProperties
ruleStringProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStringPropertiesAccess().getLengthLengthParserRuleCall_0_0());
				}
				lv_length_0_0=ruleLength
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringPropertiesRule());
					}
					set(
						$current,
						"length",
						lv_length_0_0,
						"org.xtext.json.schema.Draft7.Length");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStringPropertiesAccess().getPatternPatternParserRuleCall_1_0());
				}
				lv_pattern_1_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringPropertiesRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_1_0,
						"org.xtext.json.schema.Draft7.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLength
entryRuleLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLengthRule()); }
	iv_ruleLength=ruleLength
	{ $current=$iv_ruleLength.current; }
	EOF;

// Rule Length
ruleLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"length"'
		{
			newLeafNode(otherlv_0, grammarAccess.getLengthAccess().getLengthKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLengthAccess().getColonKeyword_1());
		}
		(
			(
				lv_length_2_0=RULE_INT
				{
					newLeafNode(lv_length_2_0, grammarAccess.getLengthAccess().getLengthINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLengthRule());
					}
					setWithLastConsumed(
						$current,
						"length",
						lv_length_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"pattern"'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getPatternKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getColonKeyword_1());
		}
		(
			(
				lv_pattern_2_0=RULE_JSON_STRING
				{
					newLeafNode(lv_pattern_2_0, grammarAccess.getPatternAccess().getPatternJSON_STRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternRule());
					}
					setWithLastConsumed(
						$current,
						"pattern",
						lv_pattern_2_0,
						"org.xtext.json.schema.Draft7.JSON_STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleMultiples
entryRuleMultiples returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplesRule()); }
	iv_ruleMultiples=ruleMultiples
	{ $current=$iv_ruleMultiples.current; }
	EOF;

// Rule Multiples
ruleMultiples returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"multiples"'
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiplesAccess().getMultiplesKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMultiplesAccess().getColonKeyword_1());
		}
		(
			(
				lv_multipleOf_2_0=RULE_INT
				{
					newLeafNode(lv_multipleOf_2_0, grammarAccess.getMultiplesAccess().getMultipleOfINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplesRule());
					}
					setWithLastConsumed(
						$current,
						"multipleOf",
						lv_multipleOf_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMinimum
entryRuleMinimum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinimumRule()); }
	iv_ruleMinimum=ruleMinimum
	{ $current=$iv_ruleMinimum.current; }
	EOF;

// Rule Minimum
ruleMinimum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"minimum"'
		{
			newLeafNode(otherlv_0, grammarAccess.getMinimumAccess().getMinimumKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMinimumAccess().getColonKeyword_1());
		}
		(
			(
				lv_minimum_2_0=RULE_INT
				{
					newLeafNode(lv_minimum_2_0, grammarAccess.getMinimumAccess().getMinimumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMinimumRule());
					}
					setWithLastConsumed(
						$current,
						"minimum",
						lv_minimum_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleExclusiveMinimum
entryRuleExclusiveMinimum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveMinimumRule()); }
	iv_ruleExclusiveMinimum=ruleExclusiveMinimum
	{ $current=$iv_ruleExclusiveMinimum.current; }
	EOF;

// Rule ExclusiveMinimum
ruleExclusiveMinimum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"exclusiveMinimum"'
		{
			newLeafNode(otherlv_0, grammarAccess.getExclusiveMinimumAccess().getExclusiveMinimumKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getExclusiveMinimumAccess().getColonKeyword_1());
		}
		(
			(
				lv_exclusiveMinimum_2_0=RULE_INT
				{
					newLeafNode(lv_exclusiveMinimum_2_0, grammarAccess.getExclusiveMinimumAccess().getExclusiveMinimumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExclusiveMinimumRule());
					}
					setWithLastConsumed(
						$current,
						"exclusiveMinimum",
						lv_exclusiveMinimum_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMaximum
entryRuleMaximum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaximumRule()); }
	iv_ruleMaximum=ruleMaximum
	{ $current=$iv_ruleMaximum.current; }
	EOF;

// Rule Maximum
ruleMaximum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"maximum"'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaximumAccess().getMaximumKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMaximumAccess().getColonKeyword_1());
		}
		(
			(
				lv_maximum_2_0=RULE_INT
				{
					newLeafNode(lv_maximum_2_0, grammarAccess.getMaximumAccess().getMaximumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaximumRule());
					}
					setWithLastConsumed(
						$current,
						"maximum",
						lv_maximum_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleExclusiveMaximum
entryRuleExclusiveMaximum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveMaximumRule()); }
	iv_ruleExclusiveMaximum=ruleExclusiveMaximum
	{ $current=$iv_ruleExclusiveMaximum.current; }
	EOF;

// Rule ExclusiveMaximum
ruleExclusiveMaximum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='"exclusiveMaximum"'
		{
			newLeafNode(otherlv_0, grammarAccess.getExclusiveMaximumAccess().getExclusiveMaximumKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getExclusiveMaximumAccess().getColonKeyword_1());
		}
		(
			(
				lv_exclusiveMaximum_2_0=RULE_INT
				{
					newLeafNode(lv_exclusiveMaximum_2_0, grammarAccess.getExclusiveMaximumAccess().getExclusiveMaximumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExclusiveMaximumRule());
					}
					setWithLastConsumed(
						$current,
						"exclusiveMaximum",
						lv_exclusiveMaximum_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_JSON_ID : '"' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '"';

RULE_JSON_STRING : '"' ('['|']'|'('|')'|'{'|'}'|'/'|'\\'|'$'|'^'|'-'|'?'|'a'..'z'|'A'..'Z'|'0'..'9'|'.'|','|';'|':')* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
