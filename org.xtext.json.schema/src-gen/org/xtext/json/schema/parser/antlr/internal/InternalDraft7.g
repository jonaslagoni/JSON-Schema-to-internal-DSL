/*
 * generated by Xtext 2.20.0
 */
grammar InternalDraft7;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.json.schema.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.json.schema.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.json.schema.services.Draft7GrammarAccess;

}

@parser::members {

 	private Draft7GrammarAccess grammarAccess;

    public InternalDraft7Parser(TokenStream input, Draft7GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected Draft7GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getRootRootParserRuleCall_1_0_0());
					}
					lv_root_1_0=ruleRoot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"root",
							lv_root_1_0,
							"org.xtext.json.schema.Draft7.Root");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getModelAccess().getCommaKeyword_1_1());
				}
			)?
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	iv_ruleRoot=ruleRoot
	{ $current=$iv_ruleRoot.current; }
	EOF;

// Rule Root
ruleRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getTypeParserRuleCall_0_1());
			}
			ruleType
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getLengthParserRuleCall_1_1());
			}
			ruleLength
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_2_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getMultiplesParserRuleCall_2_1());
			}
			ruleMultiples
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_3_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getMinimumParserRuleCall_3_1());
			}
			ruleMinimum
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_4_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getExclusiveMinimumParserRuleCall_4_1());
			}
			ruleExclusiveMinimum
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_5_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getMaximumParserRuleCall_5_1());
			}
			ruleMaximum
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRootAccess().getRootAction_6_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getRootAccess().getExclusiveMaximumParserRuleCall_6_1());
			}
			ruleExclusiveMaximum
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getRootAccess().getJSONPropertiesParserRuleCall_7());
		}
		this_JSONProperties_14=ruleJSONProperties
		{
			$current = $this_JSONProperties_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJSONProperties
entryRuleJSONProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSONPropertiesRule()); }
	iv_ruleJSONProperties=ruleJSONProperties
	{ $current=$iv_ruleJSONProperties.current; }
	EOF;

// Rule JSONProperties
ruleJSONProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJSONPropertiesAccess().getJSONPropertiesAction_0(),
					$current);
			}
		)
		otherlv_1='"properties"'
		{
			newLeafNode(otherlv_1, grammarAccess.getJSONPropertiesAccess().getPropertiesKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getJSONPropertiesAccess().getColonKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getJSONPropertiesAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJSONPropertiesAccess().getPropertiesJSONPropertyParserRuleCall_4_0());
				}
				lv_properties_4_0=ruleJSONProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSONPropertiesRule());
					}
					add(
						$current,
						"properties",
						lv_properties_4_0,
						"org.xtext.json.schema.Draft7.JSONProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getJSONPropertiesAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleJSONProperty
entryRuleJSONProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSONPropertyRule()); }
	iv_ruleJSONProperty=ruleJSONProperty
	{ $current=$iv_ruleJSONProperty.current; }
	EOF;

// Rule JSONProperty
ruleJSONProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getJSONPropertyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJSONPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.json.schema.Draft7.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getJSONPropertyAccess().getColonKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getJSONPropertyAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJSONPropertyAccess().getPropertyRootParserRuleCall_3_0());
				}
				lv_property_3_0=ruleRoot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJSONPropertyRule());
					}
					set(
						$current,
						"property",
						lv_property_3_0,
						"org.xtext.json.schema.Draft7.Root");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getJSONPropertyAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"type"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getColonKeyword_1());
		}
		(
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_2_0_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getJsonTypesParserRuleCall_2_0_1());
					}
					this_JsonTypes_3=ruleJsonTypes
					{
						$current.merge(this_JsonTypes_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)+
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_2_0_2());
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getTypeAccess().getJsonTypesParserRuleCall_2_1());
			}
			this_JsonTypes_5=ruleJsonTypes
			{
				$current.merge(this_JsonTypes_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleJsonTypes
entryRuleJsonTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getJsonTypesRule()); }
	iv_ruleJsonTypes=ruleJsonTypes
	{ $current=$iv_ruleJsonTypes.current.getText(); }
	EOF;

// Rule JsonTypes
ruleJsonTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"string"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getStringKeyword_0());
		}
		    |
		kw='"integer"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getIntegerKeyword_1());
		}
		    |
		kw='"number"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getNumberKeyword_2());
		}
		    |
		kw='"object"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getObjectKeyword_3());
		}
		    |
		kw='"array"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getArrayKeyword_4());
		}
		    |
		kw='"boolean"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getBooleanKeyword_5());
		}
		    |
		kw='"null"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getJsonTypesAccess().getNullKeyword_6());
		}
	)
;

// Entry rule entryRuleMultiples
entryRuleMultiples returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplesRule()); }
	iv_ruleMultiples=ruleMultiples
	{ $current=$iv_ruleMultiples.current.getText(); }
	EOF;

// Rule Multiples
ruleMultiples returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"multiples":'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplesAccess().getMultiplesKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getMultiplesAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMinimum
entryRuleMinimum returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinimumRule()); }
	iv_ruleMinimum=ruleMinimum
	{ $current=$iv_ruleMinimum.current.getText(); }
	EOF;

// Rule Minimum
ruleMinimum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"minimum":'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinimumAccess().getMinimumKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getMinimumAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleExclusiveMinimum
entryRuleExclusiveMinimum returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveMinimumRule()); }
	iv_ruleExclusiveMinimum=ruleExclusiveMinimum
	{ $current=$iv_ruleExclusiveMinimum.current.getText(); }
	EOF;

// Rule ExclusiveMinimum
ruleExclusiveMinimum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"exclusiveMinimum":'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExclusiveMinimumAccess().getExclusiveMinimumKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getExclusiveMinimumAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMaximum
entryRuleMaximum returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaximumRule()); }
	iv_ruleMaximum=ruleMaximum
	{ $current=$iv_ruleMaximum.current.getText(); }
	EOF;

// Rule Maximum
ruleMaximum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"maximum":'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaximumAccess().getMaximumKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getMaximumAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleExclusiveMaximum
entryRuleExclusiveMaximum returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveMaximumRule()); }
	iv_ruleExclusiveMaximum=ruleExclusiveMaximum
	{ $current=$iv_ruleExclusiveMaximum.current.getText(); }
	EOF;

// Rule ExclusiveMaximum
ruleExclusiveMaximum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"exclusiveMaximum":'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExclusiveMaximumAccess().getExclusiveMaximumKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getExclusiveMaximumAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleLength
entryRuleLength returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLengthRule()); }
	iv_ruleLength=ruleLength
	{ $current=$iv_ruleLength.current.getText(); }
	EOF;

// Rule Length
ruleLength returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"length":'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthAccess().getLengthKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getLengthAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '"' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '"';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
