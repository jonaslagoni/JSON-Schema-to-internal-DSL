/**
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.draft7.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.json.schema.draft7.Draft7Package;
import org.xtext.json.schema.draft7.Multiples;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multiples</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.json.schema.draft7.impl.MultiplesImpl#getMultipleOf <em>Multiple Of</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiplesImpl extends NumberPropertiesImpl implements Multiples
{
  /**
   * The default value of the '{@link #getMultipleOf() <em>Multiple Of</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultipleOf()
   * @generated
   * @ordered
   */
  protected static final int MULTIPLE_OF_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMultipleOf() <em>Multiple Of</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultipleOf()
   * @generated
   * @ordered
   */
  protected int multipleOf = MULTIPLE_OF_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiplesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Draft7Package.Literals.MULTIPLES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMultipleOf()
  {
    return multipleOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultipleOf(int newMultipleOf)
  {
    int oldMultipleOf = multipleOf;
    multipleOf = newMultipleOf;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Draft7Package.MULTIPLES__MULTIPLE_OF, oldMultipleOf, multipleOf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Draft7Package.MULTIPLES__MULTIPLE_OF:
        return getMultipleOf();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Draft7Package.MULTIPLES__MULTIPLE_OF:
        setMultipleOf((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Draft7Package.MULTIPLES__MULTIPLE_OF:
        setMultipleOf(MULTIPLE_OF_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Draft7Package.MULTIPLES__MULTIPLE_OF:
        return multipleOf != MULTIPLE_OF_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (multipleOf: ");
    result.append(multipleOf);
    result.append(')');
    return result.toString();
  }

} //MultiplesImpl
