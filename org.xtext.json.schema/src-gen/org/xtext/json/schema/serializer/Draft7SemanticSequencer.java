/*
 * generated by Xtext 2.20.0
 */
package org.xtext.json.schema.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.json.schema.draft7.Draft7Package;
import org.xtext.json.schema.draft7.JSONProperties;
import org.xtext.json.schema.draft7.JSONProperty;
import org.xtext.json.schema.draft7.Model;
import org.xtext.json.schema.draft7.RequiredProperties;
import org.xtext.json.schema.draft7.Root;
import org.xtext.json.schema.services.Draft7GrammarAccess;

@SuppressWarnings("all")
public class Draft7SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Draft7GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Draft7Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Draft7Package.JSON_PROPERTIES:
				sequence_JSONProperties(context, (JSONProperties) semanticObject); 
				return; 
			case Draft7Package.JSON_PROPERTY:
				sequence_JSONProperty(context, (JSONProperty) semanticObject); 
				return; 
			case Draft7Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Draft7Package.REQUIRED_PROPERTIES:
				sequence_RequiredProperties(context, (RequiredProperties) semanticObject); 
				return; 
			case Draft7Package.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Root returns JSONProperties
	 *     JSONProperties returns JSONProperties
	 *
	 * Constraint:
	 *     properties+=JSONProperty*
	 */
	protected void sequence_JSONProperties(ISerializationContext context, JSONProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONProperty returns JSONProperty
	 *
	 * Constraint:
	 *     (name=ID property=Root)
	 */
	protected void sequence_JSONProperty(ISerializationContext context, JSONProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Draft7Package.Literals.JSON_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Draft7Package.Literals.JSON_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, Draft7Package.Literals.JSON_PROPERTY__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Draft7Package.Literals.JSON_PROPERTY__PROPERTY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJSONPropertyAccess().getPropertyRootParserRuleCall_3_0(), semanticObject.getProperty());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     root+=Root+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequiredProperties returns RequiredProperties
	 *
	 * Constraint:
	 *     zuper=[JSONProperty|ID]
	 */
	protected void sequence_RequiredProperties(ISerializationContext context, RequiredProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Draft7Package.Literals.REQUIRED_PROPERTIES__ZUPER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Draft7Package.Literals.REQUIRED_PROPERTIES__ZUPER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequiredPropertiesAccess().getZuperJSONPropertyIDTerminalRuleCall_3_0_1(), semanticObject.eGet(Draft7Package.Literals.REQUIRED_PROPERTIES__ZUPER, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     {Root}
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
